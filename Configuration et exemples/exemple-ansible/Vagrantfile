# -*- mode: ruby -*-
# vi: set ft=ruby sw=2 st=2 et :

Vagrant.configure("2") do |config|

  # pour le plugin vagrant-hostmanager
  #
  #    vagrant plugin install vagrant-hostmanager
  #    vagrant hostmanager 
  #
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = false
  config.hostmanager.manage_guest = true
  config.hostmanager.include_offline = true

  # La config de référence pour les images des VMs
  config.vm.box = "debian/stretch64"
  config.vm.box_check_update = false

  # Limiter la RAM des VM
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1600"
  end

  # Mettre en place un cache pour APT
  config.vm.synced_folder '.', '/vagrant', type: "virtualbox"
  
  # pour ansible
  config.vm.define 'master' do |machine|
    machine.vm.hostname = 'master'
    machine.vm.network "private_network", ip: "192.168.42.2"
    machine.vm.provision :hostmanager
    machine.vm.provision "shell", path: "provision/master.sh"
    machine.vm.provision "shell", path: "provision/slave.sh"
  end

  # pour le service apache + php + wordpress
  config.vm.define 'web' do |machine|
    machine.vm.hostname = 'web'
    machine.vm.network "forwarded_port", guest: 80, host: 80
    machine.vm.network "private_network", ip: "192.168.42.3"
    machine.vm.provision :hostmanager
    machine.vm.provision "shell", path: "provision/slave.sh"
  end

  # pour le service mysql/mariadb
  config.vm.define 'data' do |machine|
    machine.vm.hostname = 'data'
    machine.vm.network "private_network", ip: "192.168.42.4"
    machine.vm.provision :hostmanager
    machine.vm.provision "shell", path: "provision/slave.sh"
  end

  ## provisioning en utilisant le host vagrant comme
  ## machine de controle ansible (fonctionne sur tout sauf windows)
  #
  # config.vm.provision "ansible" do |ansible|
  #  ansible.playbook = "playbook.yml"
  # end
end





